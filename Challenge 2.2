Implement a class called player that represents a cricket player .the player class should have a method called play() which prints .the player is playing cricket . derive two classes . batsman and bowler from the player class . override play() method in each derived class to print .the batsman is bating and the bowler is bowling . respectively . write a program to create object of both the batsman and bowler classes and the play() method for each object.
 Certainly! Here's a Python program that implements the `Player` class and its two derived classes, `Batsman` and `Bowler`, along with their overridden `play()` methods:
Certainly! Here's a Python program that implements the `Player` class and its two derived classes, `Batsman` and `Bowler`, along with their overridden `play()` methods:

```python
class Player:
    def play(self):
        print("The player is playing cricket.")

class Batsman(Player):
    def play(self):
        print("The batsman is batting.")

class Bowler(Player):
    def play(self):
        print("The bowler is bowling.")

# Create objects of both Batsman and Bowler classes
batsman = Batsman()
bowler = Bowler()

# Call the play() method for each object
batsman.play()
bowler.play()
```

When you run this program, it will create objects of the `Batsman` and `Bowler` classes and call the `play()` method for each object. The output will be:

```
The batsman is batting.
The bowler is bowling.
```

This demonstrates the use of inheritance and method overriding in object-oriented programming to customize the behavior of the `play()` method for each subclass.
```python
class Player:
    def play(self):
        print("The player is playing cricket.")

class Batsman(Player):
    def play(self):
        print("The batsman is batting.")

class Bowler(Player):
    def play(self):
        print("The bowler is bowling.")

# Create objects of both Batsman and Bowler classes
batsman = Batsman()
bowler = Bowler()

# Call the play() method for each object
batsman.play()
bowler.play()
```

When you run this program, it will create objects of the `Batsman` and `Bowler` classes and call the `play()` method for each object. The output will be:

```
The batsman is batting.
The bowler is bowling.
```

This demonstrates the use of inheritance and method overriding in object-oriented programming to customize the behavior of the `play()` method for each subclass.
